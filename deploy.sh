#!/bin/bash

# F5 XC Tailnet Egress Deployment Script

set -e

# Configuration - Change this variable to deploy different proxies
PROXY_TYPE=${PROXY_TYPE:-"envoy"}

# Available proxy types: envoy, caddy, haproxy, nginx, socat, gost, tail4ward
# Usage examples:
#   ./deploy.sh                    # Deploy Envoy (default)
#   PROXY_TYPE=caddy ./deploy.sh   # Deploy Caddy
#   PROXY_TYPE=haproxy ./deploy.sh # Deploy HAProxy

echo "🚀 F5 XC Tailnet Egress Deployment - $PROXY_TYPE"
echo "================================================"

# Check prerequisites
echo "📋 Checking prerequisites..."

if ! command -v terraform &> /dev/null; then
    echo "❌ Terraform is not installed. Please install Terraform first."
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    echo "❌ kubectl is not installed. Please install kubectl first."
    exit 1
fi

if [ ! -f "terraform.tfvars" ]; then
    echo "❌ terraform.tfvars not found. Please copy and configure from examples/terraform.tfvars.example"
    exit 1
fi

echo "✅ Prerequisites check passed"

# Initialize Terraform
echo "🔧 Initializing Terraform..."
terraform init

# Validate configuration
echo "🔍 Validating Terraform configuration..."
terraform validate

# Plan deployment
echo "📝 Planning deployment..."
terraform plan -out=terraform.tfplan

# Ask for confirmation
read -p "🤔 Do you want to apply these changes? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "❌ Deployment cancelled"
    exit 1
fi

# Apply changes
echo "🏗️  Applying Terraform configuration..."
terraform apply terraform.tfplan

echo "✅ Terraform deployment complete"

# Check if outputs/$PROXY_TYPE/manifests directory exists and has files
if [ -d "outputs/$PROXY_TYPE/manifests" ] && [ "$(ls -A outputs/$PROXY_TYPE/manifests)" ]; then
    echo "📦 Applying Kubernetes manifests for $PROXY_TYPE..."
    
    # Check kubectl connection
    if ! kubectl cluster-info &> /dev/null; then
        echo "❌ Cannot connect to Kubernetes cluster. Please check your kubeconfig."
        exit 1
    fi
    
    # Extract namespace from Terraform output
    NAMESPACE=$(terraform output -raw k8s_namespace 2>/dev/null || echo "default")
    echo "🎯 Using namespace: $NAMESPACE"
    
    # Check if namespace exists, fail if it doesn't
    if ! kubectl get namespace "$NAMESPACE" &> /dev/null; then
        echo "❌ Namespace '$NAMESPACE' does not exist. Please create it first or check your Terraform configuration."
        exit 1
    fi
    
    # Apply manifests in order
    for manifest in outputs/$PROXY_TYPE/manifests/*.yaml; do
        if [ -f "$manifest" ]; then
            echo "  Applying $(basename "$manifest")..."
            kubectl apply -f "$manifest" -n "$NAMESPACE"
        fi
    done
    
    echo "✅ Kubernetes manifests applied successfully"
    
    # Show deployment status
    echo "📊 Checking deployment status..."
    kubectl get statefulset tailscale-egress -n "$NAMESPACE" -o wide 2>/dev/null || echo "StatefulSet not found yet..."
    kubectl get service tailscale-egress -n "$NAMESPACE" -o wide 2>/dev/null || echo "Service not found yet..."
    
    echo ""
    echo "🎉 Deployment completed successfully!"
    echo ""
    echo "📖 Next steps:"
    echo "  - Check pod status: kubectl get pods -l app=tailscale-egress -n $NAMESPACE"
    echo "  - View logs: kubectl logs -l app=tailscale-egress -c tailscale-<tailnet-name> -n $NAMESPACE"
    echo "  - Port forward for testing: kubectl port-forward svc/tailscale-egress <local-port>:<service-port> -n $NAMESPACE"
    echo ""
    echo "📚 For more information, see configuration-summary.md generated by Terraform in the outputs/$PROXY_TYPE directory"
else
    echo "⚠️  No manifests found for $PROXY_TYPE. Run 'terraform apply' first to generate Kubernetes manifests."
fi
